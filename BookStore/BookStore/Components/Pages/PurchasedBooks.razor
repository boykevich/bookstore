@page "/PurchasedBooks"
@attribute [Authorize]
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<h1 class="mt-4">Your Purchased Books</h1>

@if (purchasedBooks == null)
{
    <p>Loading your purchased books...</p>
}
else if (!purchasedBooks.Any())
{
    <p>You have not purchased any books yet.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Book</th>
                <th>Genre</th>
                <th>Language</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in purchasedBooks)
            {
                <tr>
                    <td>@book.BookName</td>
                    <td>@book.Genre</td>
                    <td>@book.AvailableLanguage</td>
                    <td>@book.Price.ToString("C")</td>
                    <td>
                        <a href="@($"/pdf/{book.Id}")" target="_blank">Read Book</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Book> purchasedBooks = new();
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        if (string.IsNullOrEmpty(userId))
        {
            return;
        }

        purchasedBooks = await DbContext.PurchasedBooks
            .Where(pb => pb.UserId == userId)
            .Select(pb => pb.Book)
            .ToListAsync();
    }
}
