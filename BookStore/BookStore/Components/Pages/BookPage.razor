@page "/BookPage/{id:int}"
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject Data.ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<link rel="stylesheet" href="error.css" />

<div class="container my-5">
    @if (book == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="card shadow-lg p-4">
            <div class="row g-4 align-items-center">
                <!-- Book Cover -->
                <div class="col-md-4 text-center">
                    <img src="@GetImageUrl(book.ImagePath)" class="img-fluid rounded" alt="@book.BookName" style="max-height: 400px;" />
                </div>

                <!-- Book Info -->
                <div class="col-md-8">
                    <h2 class="fw-bold">@book.BookName</h2>
                    <p class="mb-2"><strong>Genre:</strong> @book.Genre</p>
                    <p class="mb-2"><strong>Price:</strong> @(isAdmin ? "$0.00" : $"${book.Price:0.00}")</p>
                    <p class="mb-2"><strong>Published:</strong> @book.DateOfPublishment.ToString("MMMM dd, yyyy")</p>
                    <p class="mb-2"><strong>Languages:</strong> @book.AvailableLanguage</p>
                    <p class="mb-2"><strong>Authors:</strong> @string.Join(", ", book.Authors.Select(a => $"{a.FirstName} {a.LastName}"))</p>

                    <p class="mt-4">@book.SmallDescription</p>

                    <!-- Action Buttons -->
                    <div class="mt-4 d-flex flex-wrap gap-2">
                        @if (purchasedBooks.Contains(book))
                        {
                            <button class="btn btn-primary" @onclick="NavigateToPurchasedBooks">Already owned</button>
                        }
                        else if (isAdmin)
                        {
                            <button class="btn btn-info" @onclick="AddToLibrary">Add to Library (Free)</button>
                        }
                        else
                        {
                            <button class="btn btn-success" @onclick="() => AddToCart(book)">Add to cart</button>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-warning mt-4 d-flex justify-content-between align-items-center">
                            <span>@errorMessage</span>
                            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int id { get; set; }

    private Book? book;
    private string errorMessage = "";
    private string? userId;
    private List<Book> purchasedBooks = new();
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        book = await DbContext.Books
            .Include(b => b.Authors)
            .FirstOrDefaultAsync(b => b.Id == id);

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        isAdmin = user.IsInRole("Admin");

        if (string.IsNullOrEmpty(userId)) return;

        purchasedBooks = await DbContext.PurchasedBooks
            .Where(pb => pb.UserId == userId)
            .Select(pb => pb.Book)
            .ToListAsync();
    }

    private async Task AddToLibrary()
    {
        if (string.IsNullOrEmpty(userId) || book == null) return;

        var alreadyOwned = await DbContext.PurchasedBooks
            .AnyAsync(pb => pb.UserId == userId && pb.BookId == book.Id);

        if (!alreadyOwned)
        {
            var purchasedBook = new PurchasedBook
                {
                    UserId = userId,
                    BookId = book.Id,
                };

            DbContext.PurchasedBooks.Add(purchasedBook);
            await DbContext.SaveChangesAsync();
            purchasedBooks.Add(book);
        }
    }

    private async Task AddToCart(Book book)
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            var returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/Account/Login?returnUrl={returnUrl}");
            return;
        }

        var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        if (string.IsNullOrEmpty(userId))
        {
            var returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/Account/Login?returnUrl={returnUrl}");
            return;
        }

        var cart = await DbContext.Carts
            .Include(c => c.Items)
            .FirstOrDefaultAsync(c => c.UserId == userId);

        if (cart == null)
        {
            cart = new Cart { UserId = userId };
            DbContext.Carts.Add(cart);
            await DbContext.SaveChangesAsync();
        }

        var cartItem = cart.Items.FirstOrDefault(ci => ci.BookId == book.Id);
        if (cartItem == null)
        {
            cartItem = new CartItem { BookId = book.Id };
            cart.Items.Add(cartItem);
            errorMessage = string.Empty;
        }
        else
        {
            errorMessage = "You already have this book. No need for a second copy!";
        }

        await DbContext.SaveChangesAsync();
    }

    private void NavigateToPurchasedBooks()
    {
        NavigationManager.NavigateTo("/PurchasedBooks");
    }

    private string GetImageUrl(string imagePath)
    {
        var version = Guid.NewGuid().ToString();
        return $"https://bookstore-media228.s3.eu-north-1.amazonaws.com{imagePath}?v={version}";
    }
}
