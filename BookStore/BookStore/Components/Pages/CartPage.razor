@page "/cartpage"
@using Stripe.Checkout
@attribute [Authorize]
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager


<h1 class="mt-4">Your Shopping Cart</h1>

@if (cart == null)
{
    <p>Loading your cart...</p>
}
else if (!cart.Items.Any())
{
    <p>Your cart is empty.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Book</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cart.Items)
            {
                <tr>
                    <td>@item.Book.BookName</td>
                    <td>@item.Book.Price.ToString("C")</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveItem(item)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <h4>Total: @cart.Items.Sum(i => i.Book.Price).ToString("C")</h4>
    <form method="post" @formname="checkout-form" @onsubmit="CheckoutAsync">
        <AntiforgeryToken />
        <button type="submit" id="checkout-button">Checkout</button>
    </form>
    <button class="btn btn-warning ms-2" @onclick="ClearCart">Clear Cart</button>
}

@code {
    private Cart? cart;
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        if (string.IsNullOrEmpty(userId))
        {
            NavigationManager.NavigateTo("/Account/Login");
            return;
        }

        cart = await DbContext.Carts
            .Include(c => c.Items)
                .ThenInclude(ci => ci.Book)
            .FirstOrDefaultAsync(c => c.UserId == userId);

        if (cart == null)
        {
            cart = new Cart { UserId = userId };
            DbContext.Carts.Add(cart);
            await DbContext.SaveChangesAsync();
        }
    }

    private async Task RemoveItem(CartItem item)
    {
        if (cart != null)
        {
            cart.Items.Remove(item);
            DbContext.CartItems.Remove(item);
            await DbContext.SaveChangesAsync();
        }
    }

    private async Task ClearCart()
    {
        if (cart != null && cart.Items.Any())
        {
            DbContext.CartItems.RemoveRange(cart.Items);
            cart.Items.Clear();
            await DbContext.SaveChangesAsync();
        }
    }

    private async Task Checkout()
    {
        if (cart == null || !cart.Items.Any())
        {
            return;
        }

        var purchasedBooks = cart.Items.Select(item => new PurchasedBook
            {
                UserId = userId!,
                BookId = item.Book.Id
            }).ToList();

        await DbContext.PurchasedBooks.AddRangeAsync(purchasedBooks);
        DbContext.CartItems.RemoveRange(cart.Items);
        cart.Items.Clear();
        await DbContext.SaveChangesAsync();

        NavigationManager.NavigateTo("/PurchasedBooks");
    }
    private async Task CheckoutAsync()
    {
        if (cart == null || cart.Items == null || !cart.Items.Any())
        {
            return;
        }
        var domain = NavigationManager.BaseUri.TrimEnd('/');

        var lineItems = cart.Items.Select(p => new SessionLineItemOptions
            {
                Quantity = 1,
                PriceData = new SessionLineItemPriceDataOptions
                {
                    Currency = "usd",
                    UnitAmountDecimal = (long)(p.Book.Price * 100), // Помножуємо на 100 для передачі в центах
                    ProductData = new SessionLineItemPriceDataProductDataOptions
                    {
                        Name = p.Book.BookName
                    }
                }
            }).ToList();
        var options = new SessionCreateOptions
            {
                LineItems = lineItems,
                Mode = "payment",
                SuccessUrl = $"{domain}/payment-success?session_id={{CHECKOUT_SESSION_ID}}",
                CancelUrl = domain,
            };
        var service = new SessionService();
        Session session = await service.CreateAsync(options);

        NavigationManager.NavigateTo(session.Url);
    }
}
